const menuBtn = document.querySelector('#menu-btn');
const sidebar = document.querySelector('.sidebar');

menuBtn.addEventListener('click', () => {
    sidebar.classList.toggle('show');
});

// Close sidebar when clicking outside on mobile
document.addEventListener('click', (e) => {
    if (window.innerWidth <= 768) {
        if (!sidebar.contains(e.target) && e.target !== menuBtn && !menuBtn.contains(e.target)) {
            sidebar.classList.remove('show');
        }
    }
});
document.addEventListener("DOMContentLoaded", function () {
    const themeBtn = document.querySelector('.darkmd-btn');
    const body = document.body;
    const lightIcon = themeBtn.querySelector("span:nth-child(1)");
    const darkIcon = themeBtn.querySelector("span:nth-child(2)");

    // Load and apply the saved theme
    const savedTheme = localStorage.getItem('theme');

    if (savedTheme === 'dark') {
        body.classList.add('dark-theme');
        lightIcon.classList.remove('active');
        darkIcon.classList.add('active');
    } else {
        body.classList.remove('dark-theme');
        lightIcon.classList.add('active');
        darkIcon.classList.remove('active');
    }

    // Toggle dark mode and save it in localStorage
    themeBtn.addEventListener('click', function () {
        body.classList.toggle('dark-theme');

        // Toggle icons
        lightIcon.classList.toggle('active');
        darkIcon.classList.toggle('active');

        // Save theme to localStorage
        const newTheme = body.classList.contains('dark-theme') ? 'dark' : 'light';
        localStorage.setItem('theme', newTheme);
    });
});
// Initialize balance variables
let isHidden = true;
let actualBalance = 3000.00;

function updateBalanceInRealTime() {
    const change = (Math.random() * 25 - 10).toFixed(2);
    actualBalance = parseFloat((actualBalance + parseFloat(change)).toFixed(2));

    if (!isHidden) {
        document.getElementById('balance').textContent = actualBalance.toFixed(2);
    }

    updateTransactionHistory(change);

    const nextUpdateTime = Math.floor(Math.random() * 8000) + 2000;
    setTimeout(updateBalanceInRealTime, nextUpdateTime);
}

// function updateTransactionHistory(amount) {
//     const transactionList = document.getElementById('transaction-history');
//     if (!transactionList) return;

//     const transactionType = parseFloat(amount) >= 0 ? 'credit' : 'debit';
//     const transactionAmount = Math.abs(parseFloat(amount)).toFixed(2);
//     const currentDate = new Date();

//     const dateOptions = { month: 'short', day: 'numeric', year: 'numeric' };
//     const timeOptions = { hour: '2-digit', minute: '2-digit' };
//     const dayMonth = currentDate.toLocaleDateString('en-US', dateOptions);
//     const time = currentDate.toLocaleTimeString('en-US', timeOptions);

//     const transactionItem = document.createElement('div');
//     transactionItem.className = 'transaction-item';
//     transactionItem.innerHTML = `
//         <div class="transaction-date">
//             <div class="day-month">${dayMonth}</div>
//             <div class="time">${time}</div>
//         </div>
//         <div class="transaction-description">
//             <div class="transaction-title">${transactionType === 'credit' ? 'Money Received' : 'Payment Sent'}</div>
//             <div class="transaction-details">${transactionType === 'credit' ? 'Real-time Credit' : 'Real-time Debit'}</div>
//         </div>
//         <div class="transaction-amount ${transactionType}">
//             ${transactionType === 'credit' ? '+ ' : '- '}NRP ${transactionAmount}
//         </div>
//         <div class="transaction-status ${transactionType === 'credit' ? 'completed' : 'pending'}">
//             ${transactionType === 'credit' ? 'Completed' : 'Pending'}
//         </div>
//     `;

//     transactionList.insertBefore(transactionItem, transactionList.firstChild);

//     while (transactionList.children.length > 10) {
//         transactionList.removeChild(transactionList.lastChild);
//     }
// }

function toggleBalance() {
    const balanceSpan = document.getElementById('balance');
    const eyeIcon = document.getElementById('eyeIcon');

    if (!balanceSpan || !eyeIcon) return;

    if (isHidden) {
        balanceSpan.textContent = actualBalance.toFixed(2);
        eyeIcon.classList.remove('fa-eye-slash');
        eyeIcon.classList.add('fa-eye');
    } else {
        balanceSpan.textContent = 'XXXXX';
        eyeIcon.classList.remove('fa-eye');
        eyeIcon.classList.add('fa-eye-slash');
    }

    isHidden = !isHidden;
}

function initializeBalanceDisplay() {
    const balanceSpan = document.getElementById('balance');
    const eyeIcon = document.getElementById('eyeIcon');

    if (!balanceSpan || !eyeIcon) return;

    if (isHidden) {
        balanceSpan.textContent = 'XXXXX';
        eyeIcon.classList.add('fa-eye-slash');
    } else {
        balanceSpan.textContent = actualBalance.toFixed(2);
        eyeIcon.classList.add('fa-eye');
    }

    document.querySelector('.balance-toggle').addEventListener('click', toggleBalance);

    updateBalanceInRealTime();
}

document.addEventListener('DOMContentLoaded', initializeBalanceDisplay);




// hrefs

document.querySelector('.remit').addEventListener('click', () => {
  window.location.href = 'remittance.html';
});
document.querySelector('.bank').addEventListener('click', () => {
  window.location.href = 'banktrans.html';
});document.querySelector('.send').addEventListener('click', () => {
  window.location.href = 'sendmoney.html';
});document.querySelector('.load').addEventListener('click', () => {
  window.location.href = 'loadmoney.html';
});







//transaction js


    // Initial balance
      let balance = 3000;
let transactions = [
    { id: 1, type: 'received', amount: 2000, from: 'John Doe', date: '2023-05-15', time: '10:30 AM', purpose: 'For lunch' },
    { id: 2, type: 'sent', amount: 500, to: 'Electricity Bill', date: '2023-05-14', time: '02:15 PM', purpose: 'Electricity payment' },
    { id: 3, type: 'received', amount: 3500, from: 'Salary', date: '2023-05-01', time: '09:00 AM', purpose: 'Monthly salary' },
    { id: 4, type: 'sent', amount: 1000, to: 'NTC Mobile', date: '2023-04-28', time: '05:45 PM', purpose: 'Mobile recharge' }
];

// DOM Elements
const balanceElement = document.getElementById('balance');
const refreshBtn = document.getElementById('refresh-btn');
const addMoneyBtn = document.getElementById('add-money-btn');
const sendMoneyBtn = document.getElementById('send-money-btn');
const transactionsList = document.getElementById('transactions-list');
const viewAllBtn = document.getElementById('view-all-btn');

// Modals
const addMoneyModal = document.getElementById('add-money-modal');
const sendMoneyModal = document.getElementById('send-money-modal');
const quickActionModal = document.getElementById('quick-action-modal');
const successModal = document.getElementById('success-modal');

// Modal buttons
const closeAddMoneyModal = document.getElementById('close-add-money-modal');
const closeSendMoneyModal = document.getElementById('close-send-money-modal');
const closeQuickActionModal = document.getElementById('close-quick-action-modal');
const closeSuccessModal = document.getElementById('close-success-modal');

// Form buttons
const confirmAddMoney = document.getElementById('confirm-add-money');
const confirmSendMoney = document.getElementById('confirm-send-money');
const confirmQuickAction = document.getElementById('confirm-quick-action');

// Form inputs
const addAmount = document.getElementById('add-amount');
const recipientId = document.getElementById('recipient-id');
const sendAmount = document.getElementById('send-amount');
const sendPurpose = document.getElementById('send-purpose');
const quickActionTitle = document.getElementById('quick-action-title');
const quickActionField1Label = document.getElementById('quick-action-field1-label');
const quickActionField1 = document.getElementById('quick-action-field1');
const quickActionAmount = document.getElementById('quick-action-amount');

// Success modal elements
const successTitle = document.getElementById('success-title');
const successMessage = document.getElementById('success-message');

// Initialize the app
function init() {
    updateBalance();
    renderTransactions();
    
    // Event listeners
    refreshBtn.addEventListener('click', refreshBalance);
    addMoneyBtn.addEventListener('click', () => toggleModal(addMoneyModal));
    sendMoneyBtn.addEventListener('click', () => toggleModal(sendMoneyModal));
    viewAllBtn.addEventListener('click', viewAllTransactions);
    
    // Modal close buttons
    closeAddMoneyModal.addEventListener('click', () => toggleModal(addMoneyModal));
    closeSendMoneyModal.addEventListener('click', () => toggleModal(sendMoneyModal));
    closeQuickActionModal.addEventListener('click', () => toggleModal(quickActionModal));
    closeSuccessModal.addEventListener('click', () => toggleModal(successModal));
    
    // Form submissions
    confirmAddMoney.addEventListener('click', handleAddMoney);
    confirmSendMoney.addEventListener('click', handleSendMoney);
    confirmQuickAction.addEventListener('click', handleQuickAction);
    
    // Quick action buttons
    document.querySelectorAll('.quick-action-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const action = this.getAttribute('data-action');
            setupQuickActionModal(action);
            toggleModal(quickActionModal);
        });
    });
}

// Update balance display
function updateBalance() {
    balanceElement.textContent = `Rs. ${balance.toLocaleString()}`;
}

// Refresh balance with animation
function refreshBalance() {
    refreshBtn.classList.add('animate-spin');
    setTimeout(() => {
        refreshBtn.classList.remove('animate-spin');
        balanceElement.classList.add('animate-pulse');
        setTimeout(() => {
            balanceElement.classList.remove('animate-pulse');
        }, 1000);
    }, 1000);
}

// Render transactions
function renderTransactions(limit = 4) {
    transactionsList.innerHTML = '';
    const transactionsToShow = transactions.slice(0, limit);
    
    transactionsToShow.forEach(transaction => {
        const transactionElement = document.createElement('div');
        transactionElement.className = 'transaction-card bg-gray-50 p-4 rounded-lg transition-all duration-200 cursor-pointer hover:shadow-sm';
        
        if (transaction.type === 'received') {
            transactionElement.innerHTML = `
                <div class="flex items-center gap-3">
                    <div class="bg-green-100 p-2 rounded-full">
                        <i class="fas fa-arrow-down text-green-600"></i>
                    </div>
                    <div class="flex-1">
                        <h4 class="font-medium text-gray-800">Received from ${transaction.from}</h4>
                        <p class="text-xs text-gray-500">${transaction.date} • ${transaction.time}</p>
                    </div>
                    <div class="text-green-600 font-medium">
                        +Rs. ${transaction.amount}
                    </div>
                </div>
                ${transaction.purpose ? `<p class="text-xs text-gray-500 mt-1">${transaction.purpose}</p>` : ''}
            `;
        } else {
            transactionElement.innerHTML = `
                <div class="flex items-center gap-3">
                    <div class="bg-red-100 p-2 rounded-full">
                        <i class="fas fa-arrow-up text-red-600"></i>
                    </div>
                    <div class="flex-1">
                        <h4 class="font-medium text-gray-800">Sent to ${transaction.to}</h4>
                        <p class="text-xs text-gray-500">${transaction.date} • ${transaction.time}</p>
                    </div>
                    <div class="text-red-600 font-medium">
                        -Rs. ${transaction.amount}
                    </div>
                </div>
                ${transaction.purpose ? `<p class="text-xs text-gray-500 mt-1">${transaction.purpose}</p>` : ''}
            `;
        }
        
        transactionsList.appendChild(transactionElement);
    });
}

// View all transactions
function viewAllTransactions() {
    renderTransactions(transactions.length);
    viewAllBtn.classList.add('hidden');
}

// Toggle modal visibility
function toggleModal(modal) {
    modal.classList.toggle('hidden');
    modal.classList.toggle('flex');
}

// Handle add money
function handleAddMoney() {
    const amount = parseFloat(addAmount.value);
    
    if (isNaN(amount) || amount <= 0) {
        alert('Please enter a valid amount');
        return;
    }
    
    balance += amount;
    updateBalance();
    
    transactions.unshift({
        id: transactions.length + 1,
        type: 'received',
        amount: amount,
        from: 'Bank Transfer',
        date: new Date().toLocaleDateString(),
        time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
        purpose: 'Added money to wallet'
    });
    
    addAmount.value = '';
    toggleModal(addMoneyModal);
    
    successTitle.textContent = 'Money Added Successfully';
    successMessage.textContent = `Rs. ${amount} has been added to your wallet.`;
    toggleModal(successModal);
    
    renderTransactions();
}

// Handle send money
function handleSendMoney() {
    const amount = parseFloat(sendAmount.value);
    const recipient = recipientId.value.trim();
    const purpose = sendPurpose.value.trim();
    
    if (isNaN(amount) || amount <= 0) {
        alert('Please enter a valid amount');
        return;
    }
    
    if (amount > balance) {
        alert('Insufficient balance');
        return;
    }
    
    if (!recipient) {
        alert('Please enter recipient ID');
        return;
    }
    
    balance -= amount;
    updateBalance();
    
    transactions.unshift({
        id: transactions.length + 1,
        type: 'sent',
        amount: amount,
        to: recipient,
        date: new Date().toLocaleDateString(),
        time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
        purpose: purpose || 'Money transfer'
    });
    
    recipientId.value = '';
    sendAmount.value = '';
    sendPurpose.value = '';
    toggleModal(sendMoneyModal);
    
    successTitle.textContent = 'Money Sent Successfully';
    successMessage.textContent = `Rs. ${amount} has been sent to ${recipient}.`;
    toggleModal(successModal);
    
    renderTransactions();
}

// Setup quick action modal based on service
function setupQuickActionModal(action) {
    let title = '';
    let fieldLabel = '';
    let placeholder = '';
    
    switch(action) {
        case 'load':
            title = 'Mobile Recharge';
            fieldLabel = 'Mobile Number';
            placeholder = 'Enter mobile number';
            break;
        case 'electricity':
            title = 'Electricity Bill';
            fieldLabel = 'Customer ID';
            placeholder = 'Enter customer ID';
            break;
        case 'internet':
            title = 'Internet Bill';
            fieldLabel = 'Account Number';
            placeholder = 'Enter account number';
            break;
        case 'tv':
            title = 'TV Subscription';
            fieldLabel = 'Smart Card Number';
            placeholder = 'Enter smart card number';
            break;
    }
    
    quickActionTitle.textContent = title;
    quickActionField1Label.textContent = fieldLabel;
    quickActionField1.placeholder = placeholder;
    quickActionAmount.value = '';
}

// Handle quick action payment
function handleQuickAction() {
    const amount = parseFloat(quickActionAmount.value);
    const fieldValue = quickActionField1.value.trim();
    
    if (isNaN(amount) || amount <= 0) {
        alert('Please enter a valid amount');
        return;
    }
    
    if (amount > balance) {
        alert('Insufficient balance');
        return;
    }
    
    if (!fieldValue) {
        alert(`Please enter ${quickActionField1Label.textContent}`);
        return;
    }
    
    balance -= amount;
    updateBalance();
    
    transactions.unshift({
        id: transactions.length + 1,
        type: 'sent',
        amount: amount,
        to: `${quickActionTitle.textContent} (${fieldValue})`,
        date: new Date().toLocaleDateString(),
        time: new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}),
        purpose: 'Utility payment'
    });
    
    quickActionField1.value = '';
    quickActionAmount.value = '';
    toggleModal(quickActionModal);
    
    successTitle.textContent = 'Payment Successful';
    successMessage.textContent = `Payment of Rs. ${amount} for ${quickActionTitle.textContent} has been completed.`;
    toggleModal(successModal);
    
    renderTransactions();
}

// Initialize the app when DOM is loaded
document.addEventListener('DOMContentLoaded', init);